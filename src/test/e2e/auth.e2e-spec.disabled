import { Test } from '@nestjs/testing';
import { INestApplication, ValidationPipe } from '@nestjs/common';
import { decode } from 'jsonwebtoken';
import { AppModule } from '../../app.module';

declare const describe, jasmine, expect, beforeAll, it: any;

describe('Auth (e2e)', () => {
    const request = require('supertest');
    let app: INestApplication;
    const loginCredentials = {
        login: 'jford',
        password: '123456',
        appID: '5f9a0d75-847d-488f-85cd-57581d9c0dc6',
    };
    const resignInLoginCredentials = {
        login: 'jford',
        password: 'efb7a01c6406b714031808176fe8a9e53323944a9db7',
        appID: '5f9a0d75-847d-488f-85cd-57581d9c0dc6',
    };
    const unauthorizedAppID = {
        login: 'jforde',
        password: '123456',
        appID: 'UnauthorizedAppID',
    };
    const wrongLoginCredentials = {
        login: 'jforde',
        password: '123456',
    };
    const wrongResignInLoginCredentials = {
        login: 'jford',
        password: 'WRONG',
        appID: '5f9a0d75-847d-488f-85cd-57581d9c0dc6',
    };
    const missingPasswordCredentials = {
        login: 'jford@gmail.com',
        appID: '5f9a0d75-847d-488f-85cd-57581d9c0dc6',
    };
    const missingLoginCredential = {
        password: '123456',
        appID: '5f9a0d75-847d-488f-85cd-57581d9c0dc6',
    };

    beforeAll(async () => {
        const moduleFixture = await Test.createTestingModule({
            imports: [AppModule,
            ],
        }).compile();

        app = moduleFixture.createNestApplication();
        app.useGlobalPipes(new ValidationPipe({ whitelist: true, transformOptions: { ignoreDecorators: true } }));

        await app.init();
        jasmine.DEFAULT_TIMEOUT_INTERVAL = 10000;
    });

    it('/auth/signin (POST)', () => {
        return request(app.getHttpServer())
            .post('/auth/signin')
            .set('Content-Type', 'application/json')
            .send(loginCredentials)
            .expect(201)
            .then((response) => {
                const reponse = response.body;
                expect((reponse.user !== undefined) && (reponse.key !== undefined)).toBe(true);

                const myJwt = decode(reponse.key);
                expect((myJwt.login !== undefined) && (myJwt.iat !== undefined) && (myJwt.exp !== undefined)).toBe(true);
            });
    });

    it('/auth/resignin (POST)', () => {
        return request(app.getHttpServer())
            .post('/auth/resignin')
            .set('Content-Type', 'application/json')
            .send(resignInLoginCredentials)
            .expect(201)
            .then((response) => {
                const reponse = response.body;
                expect((reponse.user !== undefined) && (reponse.key !== undefined)).toBe(true);

                const myJwt = decode(reponse.key);
                expect((myJwt.login !== undefined) && (myJwt.iat !== undefined) && (myJwt.exp !== undefined)).toBe(true);
            });
    });

    it('/auth/signin unauthorized app id (POST)', () => {
        return request(app.getHttpServer())
            .post('/auth/signin')
            .set('Content-Type', 'application/json')
            .send(unauthorizedAppID)
            .expect(400);
    });

    it('/auth/signin wrong login (POST)', () => {
        return request(app.getHttpServer())
            .post('/auth/signin')
            .set('Content-Type', 'application/json')
            .send(wrongLoginCredentials)
            .expect(400);
    });

    it('/auth/resignin wrong password (POST)', () => {
        return request(app.getHttpServer())
            .post('/auth/resignin')
            .set('Content-Type', 'application/json')
            .send(wrongResignInLoginCredentials)
            .expect(400);
    });

    it('/auth/signin missing password (POST)', () => {
        return request(app.getHttpServer())
            .post('/auth/signin')
            .set('Content-Type', 'application/json')
            .send(missingPasswordCredentials)
            .expect(400);
    });

    it('/auth/signin missing login (POST)', () => {
        return request(app.getHttpServer())
            .post('/auth/signin')
            .set('Content-Type', 'application/json')
            .send(missingLoginCredential)
            .expect(400);
    });
});